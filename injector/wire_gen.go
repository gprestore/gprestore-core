// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	"github.com/gprestore/gprestore-core/internal/delivery/mq"
	"github.com/gprestore/gprestore-core/internal/delivery/rest"
	"github.com/gprestore/gprestore-core/internal/delivery/rest/middleware"
	"github.com/gprestore/gprestore-core/internal/delivery/rest/route"
	"github.com/gprestore/gprestore-core/internal/infrastructure/database"
	"github.com/gprestore/gprestore-core/internal/repository"
	"github.com/gprestore/gprestore-core/internal/service"
	"github.com/gprestore/gprestore-core/internal/validation"
	"net/http"
)

// Injectors from injector.go:

func InjectRoute() *route.Route {
	serveMux := http.NewServeMux()
	mongoDatabase := database.NewMongoDB()
	userRepository := repository.NewUserRepository(mongoDatabase)
	authService := service.NewAuthService(userRepository)
	middlewareMiddleware := middleware.NewMiddleware(authService)
	validate := validation.New()
	userService := service.NewUserService(userRepository, validate)
	userHandler := rest.NewUserHandler(userService)
	authHandler := rest.NewAuthHandler(authService)
	storeRepository := repository.NewStoreRepository(mongoDatabase)
	storeService := service.NewStoreService(storeRepository, validate)
	storeHandler := rest.NewStoreHandler(storeService)
	itemRepository := repository.NewItemRepository(mongoDatabase)
	stockRepository := repository.NewStockRepository(mongoDatabase)
	itemService := service.NewItemService(itemRepository, stockRepository, validate)
	itemHandler := rest.NewItemHandler(itemService, storeService)
	stockService := service.NewStockService(stockRepository, itemRepository, validate)
	stockHandler := rest.NewStockHandler(stockService, storeService)
	orderRepository := repository.NewOrderRepository(mongoDatabase)
	orderService := service.NewOrderService(orderRepository, itemRepository, stockRepository, validate)
	orderHandler := rest.NewOrderHandler(orderService, storeService)
	paymentService := service.NewPaymentService()
	paymentHandler := rest.NewPaymentHandler(paymentService)
	routeRoute := route.New(serveMux, middlewareMiddleware, userHandler, authHandler, storeHandler, itemHandler, stockHandler, orderHandler, paymentHandler)
	return routeRoute
}

func InjectConsumer() *mq.Consumer {
	mailService := service.NewMailService()
	consumer := mq.NewConsumer(mailService)
	return consumer
}
